import json
from aiogram import F, Router
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import app.keyboards as kb
from app.additional import updateMenu
from app.database import db  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

router = Router()
user_state = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class AuthState(StatesGroup):
    WAITING_FOR_PERSONNEL_NUMBER = State()
    WAITING_FOR_PHONE_NUMBER = State()
    WAITING_FOR_USERNAME = State()  # –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_auth(message: Message, state: FSMContext) -> bool:
    current_state = await state.get_state()
    if current_state not in [AuthState.WAITING_FOR_PERSONNEL_NUMBER.state, 
                            AuthState.WAITING_FOR_PHONE_NUMBER.state,
                            AuthState.WAITING_FOR_USERNAME.state]:
        return True
        
    await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
    return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—Ö–æ–¥–∞:", reply_markup=kb.start)

@router.message(F.text == '–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
async def has_personnel_number(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AuthState.WAITING_FOR_PERSONNEL_NUMBER)

@router.message(F.text == '–£ –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞')
async def no_personnel_number(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AuthState.WAITING_FOR_PHONE_NUMBER)

@router.message(AuthState.WAITING_FOR_PERSONNEL_NUMBER)
async def process_personnel_number(message: Message, state: FSMContext):
    personnel_number = message.text.strip()
    user = await db.get_user_by_personnel_number(personnel_number)
    
    if user:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['username']}!", reply_markup=kb.main)
        await state.clear()
    else:
        await state.update_data(personnel_number=personnel_number)
        await message.answer("–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(AuthState.WAITING_FOR_PHONE_NUMBER)

@router.message(AuthState.WAITING_FOR_PHONE_NUMBER)
async def process_phone_number(message: Message, state: FSMContext):
    phone_number = message.text.strip()
    user = await db.get_user_by_phone_number(phone_number)
    
    if user:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['username']}!", reply_markup=kb.main)
        await state.clear()
    else:
        data = await state.get_data()
        personnel_number = data.get('personnel_number')
        
        await state.update_data(phone_number=phone_number)
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        await state.set_state(AuthState.WAITING_FOR_USERNAME)

@router.message(AuthState.WAITING_FOR_USERNAME)
async def process_username(message: Message, state: FSMContext):
    username = message.text.strip()
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.create_user(
        username=username,
        personnel_number=data.get('personnel_number'),
        phone_number=data.get('phone_number')
    )
    
    if user:
        await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {username}! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb.main)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start")
    
    await state.clear()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
@router.message(F.text == 'üîç –ù–æ–≤–æ—Å—Ç–∏')
async def handle_message_news(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', reply_markup=kb.news)

@router.message(F.text == 'üçΩ –ú–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π')
async def handle_message_menu(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    file = FSInputFile('data/test.pdf')
    await message.answer_document(document=file, caption='–ú–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π')
    await message.answer(updateMenu())

@router.message(F.text == 'üöç –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç')
async def handle_message_transport(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    await message.answer("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.message(F.text == 'ü™™ –°–æ—Ü. –ø—Ä–æ–≥—Ä–∞–º–º—ã')
async def handle_message_social(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    await message.answer("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.message(F.text == 'üìä –û–ø—Ä–æ—Å')
async def handle_message_survey(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    await message.answer("–û–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@router.message(F.text == 'üì§ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def handle_message_ask(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    await message.answer("–í–æ–ø—Ä–æ—Å—ã –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
@router.message(F.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
async def back_to_main(message: Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main)

@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_news(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=kb.news)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
@router.message(F.text == 'üöÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏')
async def handle_message_last_news(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True, 'category': 'all'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')

@router.message(F.text == 'üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏')
async def handle_news_holidays(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True, 'category': '–ü—Ä–∞–∑–¥–Ω–∏–∫–∏'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')

@router.message(F.text == 'üè≠ –ñ–∏–∑–Ω—å –∑–∞–≤–æ–¥–∞')
async def handle_news_life(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True, 'category': '–ñ–∏–∑–Ω—å –∑–∞–≤–æ–¥–∞'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')

@router.message(F.text == 'üíº –í–∞–∫–∞–Ω—Å–∏–∏')
async def handle_news_vacancies(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True, 'category': '–í–∞–∫–∞–Ω—Å–∏–∏'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')

@router.message(F.text == 'üë®‚Äçüîß –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')
async def handle_news_employees(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True, 'category': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')

@router.message(F.text == 'ü¶æ –ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è')
async def handle_news_inventions(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True, 'category': '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')

@router.message(F.text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
async def handle_news_achievements(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
    user_id = message.from_user.id
    user_state[user_id] = {'waiting_number': True, 'category': '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'}
    await message.answer('–°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?')

@router.message(lambda m: m.text.isdigit())
async def handle_news_number(message: Message, state: FSMContext):
    if not await check_auth(message, state):
        return
        
    user_id = message.from_user.id
    if user_id not in user_state or not user_state[user_id].get('waiting_number'):
        return

    number = int(message.text)
    if number < 1:
        await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ')
        return
        
    user_state[user_id]['number'] = number
    user_state[user_id]['waiting_number'] = False

    with open('data/news.json', 'r') as f:
        allNews = json.load(f)
        if user_state[user_id]['category'] == 'all':
            filtered = allNews
        else:
            filtered = [n for n in allNews if n["category"] == user_state[user_id]['category']]

        selected = filtered[:number]

        if not selected:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç.", reply_markup=kb.main)
        else:
            for news in selected:
                await message.answer(
                    f"<i>{news['category']}</i>\n\n{news['text']}\n\n<b>{news['date']}</b>",
                    parse_mode="HTML", 
                    reply_markup=kb.main
                )

    user_state.pop(user_id)